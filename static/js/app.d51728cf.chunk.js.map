{"version":3,"sources":["src/styles/styles.js","src/screens/ContactScreen.tsx","src/screens/DetailsScreen.tsx","src/navigation/ContactStack.tsx","src/screens/ProfileScreen.tsx","src/screens/SettingsScreen.tsx","src/screens/HomeScreen.tsx","src/screens/WelcomeScreen.tsx","src/navigation/MainTab.tsx","App.tsx"],"names":["globalStyles","StyleSheet","create","heading1","fontSize","fontFamily","padding","alignSelf","heading2","droidSafeArea","flex","paddingTop","Platform","OS","backgroundColor","CONTACTS","id","name","birth_year","ContactScreen","navigation","useNavigation","ScrollView","style","contentContainerStyle","flexGrow","Text","View","FlatList","data","renderItem","item","Pressable","onPress","navigate","birthYear","paddingHorizontal","paddingVertical","borderWidth","hairlineWidth","borderColor","borderRadius","margin","alignItems","fontWeight","DetailScreen","useRoute","params","paddingBottom","Stack","createStackNavigator","ContactStackNavigator","Navigator","Screen","component","options","headerShown","DetailsScreen","myFonts","RobotoMono_500Medium","RobotoMono_700Bold","Creepster_400Regular","ProfileScreen","state","fontsLoaded","a","async","Font","this","setState","_loadFontsAsync","styles","container","copy","React","Component","height","justifyContent","color","SettingsScreen","useState","isEnabled","setIsEnabled","useFonts","page","fieldset","labels","Button","title","buttons","accessibilityLabel","Switch","trackColor","false","true","thumbColor","onValueChange","previousState","value","gap","marginBottom","HomeScreen","EResult","MainTab","BottomTab","createBottomTabNavigator","screenOptions","tabBarActiveTintColor","tabBarLabel","tabBarIcon","size","AntDesign","ContactStack","WelcomeScreen","resultMessage","description","RobotoMono_400Regular","facialRecognitionAvailable","setFacialRecognitionAvailable","fingerprintAvailable","setFingerprintAvailable","irisAvailable","setIrisAvailable","loading","setLoading","result","setResult","useEffect","LocalAuthentication","types","length","includes","FACIAL_RECOGNITION","FINGERPRINT","IRIS","checkSupportedAuthentication","CANCELLED","DISABLED","ERROR","SUCCESS","text","results","success","error","App","NavigationContainer"],"mappings":"6OAEaA,EAAeC,UAAWC,OAAO,CAC5CC,SAAU,CACRC,SAAU,GACVC,WAAY,qBACZC,QAAS,EACTC,UAAW,UAEbC,SAAU,CACRJ,SAAU,GACVC,WAAY,qBACZC,QAAS,GAEXG,cAAe,CACbC,KAAM,EACNC,WAA4B,YAAhBC,UAASC,GAAmB,GAAK,EAC7CC,gBAAiB,a,gBCTfC,EAAW,CACf,CACEC,GAAI,EACJC,KAAM,iBACNC,WAAY,SAEd,CACEF,GAAI,EACJC,KAAM,QACNC,WAAY,UAEd,CACEF,GAAI,EACJC,KAAM,QACNC,WAAY,SAEd,CACEF,GAAI,EACJC,KAAM,cACNC,WAAY,WAEd,CACEF,GAAI,EACJC,KAAM,cACNC,WAAY,UAoDDC,EAhDO,WACpB,IAAMC,EAAaC,0BAwBnB,OACE,eAACC,EAAA,QAAD,CAAYC,MAAOvB,EAAaS,cAAee,sBAAuB,CAAEC,SAAU,GAAlF,UACE,cAACC,EAAA,QAAD,CAAMH,MAAOvB,EAAaG,SAA1B,uBACA,eAACwB,EAAA,QAAD,CAAMJ,MAAO,CAAEb,KAAM,EAAGC,WAAY,IAApC,UACE,cAACiB,EAAA,QAAD,CAAUC,KAAMd,EAAUe,WA1BR,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,eAACC,EAAA,QAAD,CACEC,QAAS,kBACPb,EAAWc,SAAS,UAAW,CAC7BjB,KAAMc,EAAKd,KACXkB,UAAWJ,EAAKb,cAJtB,UAQE,cAACQ,EAAA,QAAD,CAAMH,MAAO,CAAEnB,SAAU,GAAIgC,kBAAmB,GAAIC,gBAAiB,IAArE,SACGN,EAAKd,OAER,cAACU,EAAA,QAAD,CACEJ,MAAO,CACLe,YAAarC,UAAWsC,cACxBC,YAAa,gBAWjB,cAACR,EAAA,QAAD,CACEC,QAAS,kBAAMb,EAAWc,SAAS,aACnCX,MAAO,CACLjB,QAAS,EACTgC,YAAa,EACbG,aAAc,EACdD,YAAa,MACbE,OAAQ,GACRC,WAAY,UARhB,SAWE,cAACjB,EAAA,QAAD,CAAMH,MAAO,CAAEnB,SAAU,GAAIwC,WAAY,OAAzC,4CChDKC,EAhBM,WACnB,IACA,EADcC,qBACoBC,OAA1B9B,EAAR,EAAQA,KAAMkB,EAAd,EAAcA,UAEd,OACE,eAACb,EAAA,QAAD,CAAYC,MAAOvB,EAAaS,cAAee,sBAAuB,CAAEC,SAAU,GAAlF,UACE,cAACC,EAAA,QAAD,CAAMH,MAAOvB,EAAaG,SAA1B,6BACA,eAACwB,EAAA,QAAD,CAAMJ,MAAO,CAAEb,KAAM,EAAGI,gBAAiB,UAAWH,WAAY,GAAIyB,kBAAmB,IAAvF,UACE,cAACV,EAAA,QAAD,CAAMH,MAAO,CAAEnB,SAAU,GAAI4C,cAAe,IAA5C,yCACA,eAACtB,EAAA,QAAD,CAAMH,MAAO,CAAEnB,SAAU,GAAI4C,cAAe,IAA5C,mBAAyD/B,KACzD,eAACS,EAAA,QAAD,CAAMH,MAAO,CAAEnB,SAAU,IAAzB,yBAA4C+B,YChB9Cc,EAAQC,oBAgBCC,EAde,WAE5B,OACE,eAACF,EAAMG,UAAP,WACE,cAACH,EAAMI,OAAP,CACEpC,KAAK,iBACLqC,UAAWnC,EACXoC,QAAS,CAAEC,aAAa,KAE1B,cAACP,EAAMI,OAAP,CAAcpC,KAAK,UAAUqC,UAAWG,Q,0iBCP9C,IAAMC,EAAU,CACdC,4CACAC,wCACAC,6CAGmBC,E,kLACnBC,MAAQ,CACNC,aAAa,G,6CAGf,oBAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACQE,YAAeT,IADvB,OAEEU,KAAKC,SAAS,CAAEL,aAAa,IAF/B,8D,+BAKA,WACEI,KAAKE,oB,oBAGP,WACE,OAAKF,KAAKL,MAAMC,YAId,eAAC1C,EAAA,QAAD,CAAYC,MAAOvB,EAAaS,cAAee,sBAAuB,CAAEC,SAAU,GAAlF,UACE,cAACC,EAAA,QAAD,CAAMH,MAAOvB,EAAaG,SAA1B,qBACA,eAACwB,EAAA,QAAD,CAAMJ,MAAOgD,EAAOC,UAApB,UACE,cAAC9C,EAAA,QAAD,CAAMH,MAAOgD,EAAOE,KAApB,yCACA,cAAC/C,EAAA,QAAD,CAAMH,MAAO,CAACgD,EAAOE,KAAM,CAAErE,SAAU,GAAIC,WAAY,yBAAvD,0BAGA,cAACqB,EAAA,QAAD,CAAMH,MAAOgD,EAAOE,KAApB,0DAVG,S,GAhB8BC,IAAMC,WAiC3CJ,EAAStE,UAAWC,OAAO,CAC/BsE,UAAW,CACT9D,KAAM,EACNkE,OAAQ,OACR9D,gBAAiB,UACjB6B,WAAY,SACZkC,eAAgB,UAElBJ,KAAM,CACJK,MAAO,QACP1E,SAAU,GACViC,gBAAiB,GACjBhC,WAAY,0B,iCCcD0E,EAvEQ,WACrB,MAAkCC,oBAAS,GAA3C,WAAOC,EAAP,KAAkBC,EAAlB,KAEA,EAAsBC,mBAAS,CAC7BxB,4CACAC,0CAGF,OALA,YASI,cAACtC,EAAA,QAAD,CAAYC,MAAOvB,EAAaS,cAAee,sBAAuB,CAAEC,SAAU,GAAlF,SACE,eAACE,EAAA,QAAD,CAAMJ,MAAOgD,EAAOa,KAApB,UACE,cAAC1D,EAAA,QAAD,CAAMH,MAAOvB,EAAaG,SAA1B,uBACA,cAACuB,EAAA,QAAD,CAAMH,MAAOvB,EAAaQ,SAA1B,sBACA,eAACmB,EAAA,QAAD,CAAMJ,MAAOgD,EAAOc,SAApB,UACE,cAAC3D,EAAA,QAAD,CAAMH,MAAOgD,EAAOe,OAApB,iCACA,cAACC,EAAA,QAAD,CACEC,MAAM,WACNjE,MAAOgD,EAAOkB,QACdC,mBAAmB,oCAGvB,cAAChE,EAAA,QAAD,CAAMH,MAAOvB,EAAaQ,SAA1B,yBACA,eAACmB,EAAA,QAAD,CAAMJ,MAAOgD,EAAOc,SAApB,UACE,cAACE,EAAA,QAAD,CACEhE,MAAOgD,EAAOkB,QACdD,MAAM,eACNE,mBAAmB,wEAGrB,cAACH,EAAA,QAAD,CACEhE,MAAOgD,EAAOkB,QACdD,MAAM,OACNE,mBAAmB,qEAErB,cAAChE,EAAA,QAAD,CAAMH,MAAOgD,EAAOe,OAApB,gCACA,cAACK,EAAA,QAAD,CACEC,WAAY,CAAEC,MAAO,UAAWC,KAAM,WACtCC,WAAYd,EAAY,UAAY,UACpCe,cAvCS,kBAAMd,GAAa,SAACe,GAAD,OAAoBA,MAwChDC,MAAOjB,OAIX,cAACvD,EAAA,QAAD,CAAMH,MAAOvB,EAAaQ,SAA1B,sBACA,eAACmB,EAAA,QAAD,CAAMJ,MAAOgD,EAAOc,SAApB,UACE,cAACE,EAAA,QAAD,CACEhE,MAAOgD,EAAOkB,QACdD,MAAM,gBACNE,mBAAmB,wEAGrB,cAACH,EAAA,QAAD,CACEhE,MAAOgD,EAAOkB,QACdD,MAAM,aACNE,mBAAmB,wDAGrB,cAACH,EAAA,QAAD,CACEhE,MAAOgD,EAAOkB,QACdD,MAAM,WACNE,mBAAmB,6DAtDtB,MAgELnB,EAAStE,UAAWC,OAAO,CAC/BoF,OAAQ,CACNhF,QAAS,EACTD,WAAY,wBAEdoF,QAAS,CACPrF,SAAU,GACVC,WAAY,uBACZC,QAAS,GAEX+E,SAAU,CACR3E,KAAM,EACNyF,IAAK,GACLtB,eAAgB,aAChBlC,WAAY,aACZyD,aAAc,IAEhBhB,KAAM,CACJ1E,KAAM,EACNyF,IAAK,GACLrF,gBAAiB,aCnDNuF,IC7BVC,ED6BUD,EAzBf,WACE,IAAMjF,EAAaC,0BAEnB,EAAsB8D,mBAAS,CAC7BxB,4CACAC,wCACAC,8CAGF,OANA,YAUI,eAACvC,EAAA,QAAD,CAAYC,MAAOvB,EAAaS,cAAee,sBAAuB,CAAEC,SAAU,GAAlF,UACE,cAACC,EAAA,QAAD,CAAMH,MAAOvB,EAAaG,SAA1B,kBACA,eAACwB,EAAA,QAAD,CAAMJ,MAAOgD,EAAOC,UAApB,UACE,cAAC9C,EAAA,QAAD,CAAMH,MAAOgD,EAAOE,KAApB,uCACA,cAAC/C,EAAA,QAAD,CAAMH,MAAOgD,EAAOE,KAApB,oCACA,cAACc,EAAA,QAAD,CAAQC,MAAM,WAAWvD,QAAS,kBAAMb,EAAWc,SAAS,oBAR3D,MAiBLqC,EAAStE,UAAWC,OAAO,CAC/BsE,UAAW,CACT9D,KAAM,EACNI,gBAAiB,UACjB6B,WAAY,SACZkC,eAAgB,UAElBJ,KAAM,CACJK,MAAO,QACP1E,SAAU,GACViC,gBAAiB,GACjBhC,WAAY,0B,SEPDkG,EAzCC,WACd,IAAMC,EAAYC,oBAElB,OACE,eAACD,EAAUpD,UAAX,CAAqBsD,cAAe,CAAElD,aAAa,EAAOmD,sBAAuB,WAAjF,UACE,cAACH,EAAUnD,OAAX,CACEpC,KAAK,OACLqC,UAAW+C,EACX9C,QAAS,CACPqD,YAAa,OACbC,WAAY,gBAAG/B,EAAH,EAAGA,MAAOgC,EAAV,EAAUA,KAAV,OAAqB,cAACC,EAAA,QAAD,CAAW9F,KAAK,OAAO6F,KAAMA,EAAMhC,MAAOA,QAG/E,cAAC0B,EAAUnD,OAAX,CACEpC,KAAK,WACLqC,UAAW0D,EACXzD,QAAS,CACPqD,YAAa,WACbC,WAAY,gBAAG/B,EAAH,EAAGA,MAAOgC,EAAV,EAAUA,KAAV,OAAqB,cAACC,EAAA,QAAD,CAAW9F,KAAK,WAAW6F,KAAMA,EAAMhC,MAAOA,QAGnF,cAAC0B,EAAUnD,OAAX,CACEpC,KAAK,UACLqC,UAAWQ,EACXP,QAAS,CACPqD,YAAa,UACbC,WAAY,gBAAG/B,EAAH,EAAGA,MAAOgC,EAAV,EAAUA,KAAV,OAAqB,cAACC,EAAA,QAAD,CAAW9F,KAAK,OAAO6F,KAAMA,EAAMhC,MAAOA,QAG/E,cAAC0B,EAAUnD,OAAX,CACEpC,KAAK,WACLqC,UAAWyB,EACXxB,QAAS,CACPqD,YAAa,WACbC,WAAY,gBAAG/B,EAAH,EAAGA,MAAOgC,EAAV,EAAUA,KAAV,OAAqB,cAACC,EAAA,QAAD,CAAW9F,KAAK,UAAU6F,KAAMA,EAAMhC,MAAOA,Y,6BD5BnFwB,K,sBAAAA,E,oBAAAA,E,cAAAA,E,mBAAAA,M,KASL,IAyJeW,GAzJO,WACpB,IAyDIC,EAmBAC,EA5EE/F,EAAaC,0BACnB,EAAsB8D,mBAAS,CAC7BiC,8CACAzD,4CACAC,wCACAC,8CAJKG,EAAP,YAMA,EAAoEU,IAAMM,UAAS,GAAnF,WAAOqC,EAAP,KAAmCC,EAAnC,KACA,EAAwD5C,IAAMM,UAAS,GAAvE,WAAOuC,EAAP,KAA6BC,EAA7B,KACA,EAA0C9C,IAAMM,UAAS,GAAzD,WAAOyC,EAAP,KAAsBC,EAAtB,KACA,EAA8BhD,IAAMM,UAAS,GAA7C,WAAO2C,EAAP,KAAgBC,EAAhB,KACA,EAA4BlD,IAAMM,WAAlC,WAAO6C,EAAP,KAAeC,EAAf,KA+CA,OALApD,IAAMqD,WAAU,YAxCqB,mBAAA9D,EAAAC,OAAA,kEAAAD,EAAA,MACf+D,uCADe,QAC7BC,EAD6B,SAEtBA,EAAMC,SACjBZ,EACEW,EAAME,SAASH,sBAAuCI,qBAExDZ,EAAwBS,EAAME,SAASH,sBAAuCK,cAC9EX,EAAiBO,EAAME,SAASH,sBAAuCM,QAPtC,4DAyCnCC,KACC,IAGKV,GACN,KAAKvB,EAAQkC,UACXtB,EAAgB,4CAChB,MACF,KAAKZ,EAAQmC,SACXvB,EAAgB,6CAChB,MACF,KAAKZ,EAAQoC,MACXxB,EAAgB,uCAChB,MACF,KAAKZ,EAAQqC,QACXzB,EAAgB,6BAChB,MACF,QACEA,EAAgB,GAuBpB,OAjBEC,EADEE,GAA8BE,GAAwBE,EAC1C,iDACLJ,GAA8BE,EACzB,wCACLF,GAA8BI,EACzB,uCACLF,GAAwBE,EACnB,wCACLJ,EACK,4BACLE,EACK,8BACLE,EACK,4BAEA,4DAGXzD,EAID,eAACrC,EAAA,QAAD,CAAMJ,MAAOgD,GAAOC,UAApB,UACE,cAAC9C,EAAA,QAAD,CACEH,MAAO,CACLgD,GAAOqE,KACP,CAAExI,SAAU,GAAI4C,cAAe,GAAI3C,WAAY,uBAHnD,iCAOA,cAACqB,EAAA,QAAD,CACEH,MAAO,CACLgD,GAAOqE,KACP,CAAExI,SAAU,GAAI4C,cAAe,GAAI3C,WAAY,yBAHnD,6BAOA,cAACqB,EAAA,QAAD,CACEH,MAAO,CACLgD,GAAOqE,KACP,CAAExI,SAAU,GAAI4C,cAAe,GAAI3C,WAAY,yBAHnD,oCAOA,eAACqB,EAAA,QAAD,CAAMH,MAAO,CAACgD,GAAOqE,KAAM,CAAExI,SAAU,GAAIC,WAAY,yBAAvD,UACG8G,EADH,IACiB,OAEjB,cAACzF,EAAA,QAAD,CAAMH,MAAO,CAACgD,GAAOqE,KAAM,CAAExI,SAAU,GAAIC,WAAY,yBAAvD,SACGgH,GAA8BE,GAAwBE,EACrD,cAAClC,EAAA,QAAD,CAAQC,MAAM,eAAevD,QAtGlB,0BAAAgC,EAAAC,OAAA,oDACfyD,EADe,wDAKnBC,GAAW,GALQ,oBAAA3D,EAAA,MAQK+D,uBARL,QAQXa,EARW,QAULC,SACVhB,EAAUxB,EAAQqC,SAClBvH,EAAWc,SAAS,SACO,YAAlB2G,EAAQE,MACjBjB,EAAUxB,EAAQmC,UAEA,gBAAlBI,EAAQE,OACU,kBAAlBF,EAAQE,OACU,eAAlBF,EAAQE,OAERjB,EAAUxB,EAAQkC,WApBH,kDAuBjBV,EAAUxB,EAAQoC,OAvBD,QA0BnBd,GAAW,GA1BQ,oEAuGT,OAEN,cAAClG,EAAA,QAAD,CAAMH,MAAO,CAACgD,GAAOqE,KAAM,CAAExI,SAAU,GAAIC,WAAY,yBAAvD,SACG6G,EAAgB,cAACxF,EAAA,QAAD,+BAAgC,OAEnD,cAACA,EAAA,QAAD,CAAMH,MAAO,CACXgD,GAAOqE,KACP,CACExI,SAAU,GAAIC,WAAY,yBAH9B,sDAQA,cAACkF,EAAA,QAAD,CACEC,MAAM,UACNjE,MAAO,CAACgD,GAAOqE,KAAM,CAAExI,SAAU,GAAIC,WAAY,yBACjD4B,QAAS,WACPb,EAAWc,SAAS,cAhDrB,MA0DLqC,GAAStE,UAAWC,OAAO,CAC/BsE,UAAW,CACT9D,KAAM,EACNI,gBAAiB,UACjB6B,WAAY,SACZkC,eAAgB,UAElB+D,KAAM,CACJ9D,MAAO,QACPzC,gBAAiB,MEjLfY,I,OAAQC,qBAEC,SAAS8F,KACtB,OACE,cAACC,EAAA,QAAD,UACE,eAAC,GAAM7F,UAAP,CAAiBsD,cAAe,CAAElD,aAAa,GAA/C,UACE,cAAC,GAAMH,OAAP,CAAcpC,KAAK,UAAUqC,UAAW2D,KACxC,cAAC,GAAM5D,OAAP,CAAcpC,KAAK,OAAOqC,UAAWiD,W","file":"static/js/app.d51728cf.chunk.js","sourcesContent":["import { StyleSheet, Platform } from 'react-native';\n\nexport const globalStyles = StyleSheet.create({\n  heading1: {\n    fontSize: 22,\n    fontFamily: 'RobotoMono_700Bold',\n    padding: 4,\n    alignSelf: 'center',\n  },\n  heading2: {\n    fontSize: 20,\n    fontFamily: 'RobotoMono_700Bold',\n    padding: 4\n  },\n  droidSafeArea: {\n    flex: 1,\n    paddingTop: Platform.OS === 'android' ? 50 : 0,\n    backgroundColor: '#F5F8F3',\n  },\n});\n\n\n\n\n\n","import { StyleSheet, View, ScrollView, Text, Pressable, FlatList } from 'react-native';\n\nimport { globalStyles } from '../styles/styles';\n\nimport { useNavigation } from '@react-navigation/native';\n\nimport { ContactScreenNavigationProp } from '../navigation/types';\n\nconst CONTACTS = [\n  {\n    id: 1,\n    name: 'Luke Skywalker',\n    birth_year: '19BBY'\n  },\n  {\n    id: 2,\n    name: 'C-3PO',\n    birth_year: '112BBY'\n  },\n  {\n    id: 3,\n    name: 'R2-D2',\n    birth_year: '33BBY'\n  },\n  {\n    id: 4,\n    name: 'Darth Vader',\n    birth_year: '41.9BBY'\n  },\n  {\n    id: 5,\n    name: 'Leia Organa',\n    birth_year: '19BBY'\n  }\n];\n\nconst ContactScreen = () => {\n  const navigation = useNavigation<ContactScreenNavigationProp>();\n\n  const renderListItems = ({ item }) => {\n    return (\n      <Pressable\n        onPress={() =>\n          navigation.navigate('Details', {\n            name: item.name,\n            birthYear: item.birth_year\n          })\n        }\n      >\n        <Text style={{ fontSize: 18, paddingHorizontal: 12, paddingVertical: 12 }}>\n          {item.name}\n        </Text>\n        <View\n          style={{\n            borderWidth: StyleSheet.hairlineWidth,\n            borderColor: '#ccc'\n          }}\n        />\n      </Pressable>\n    );\n  };\n  return (\n    <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n      <Text style={globalStyles.heading1}>Contacts </Text>\n      <View style={{ flex: 1, paddingTop: 10 }}>\n        <FlatList data={CONTACTS} renderItem={renderListItems} />\n        <Pressable\n          onPress={() => navigation.navigate('Settings')} // TODO - broken due to nested navigators.\n          style={{\n            padding: 8,\n            borderWidth: 1,\n            borderRadius: 4,\n            borderColor: 'red',\n            margin: 12,\n            alignItems: 'center'\n          }}\n        >\n          <Text style={{ fontSize: 16, fontWeight: '600' }}>Go to Settings screen</Text>\n        </Pressable>\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default ContactScreen;\n","import { ScrollView, View, Text } from 'react-native';\n\nimport { useRoute } from '@react-navigation/native';\n\nimport { ContactStackNavigatorParamList } from '../navigation/types';\n\nimport type { RouteProp } from '@react-navigation/native';\n\ntype DetailsScreenRouteProp = RouteProp<ContactStackNavigatorParamList, 'Details'>;\n\nimport { globalStyles } from '../styles/styles';\n\n\nconst DetailScreen = () => {\n  const route = useRoute<DetailsScreenRouteProp>();\n  const { name, birthYear } = route.params;\n\n  return (\n    <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n      <Text style={globalStyles.heading1}>Contact Details</Text>\n      <View style={{ flex: 1, backgroundColor: '#FBEEC6', paddingTop: 12, paddingHorizontal: 10 }}>\n        <Text style={{ fontSize: 18, paddingBottom: 24 }}>This is the Details screen.</Text>\n        <Text style={{ fontSize: 18, paddingBottom: 12 }}>Name: {name}</Text>\n        <Text style={{ fontSize: 18 }}>Birth Year: {birthYear}</Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default DetailScreen;\n","import * as React from 'react';\n\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport ContactScreen from '../screens/ContactScreen';\nimport DetailsScreen from '../screens/DetailsScreen';\n\nconst Stack = createStackNavigator();\n\nconst ContactStackNavigator = () => {\n  //  'contact screen' subnav will be hidden\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Contact Screen\"\n        component={ContactScreen}\n        options={{ headerShown: false }}\n      />\n      <Stack.Screen name=\"Details\" component={DetailsScreen} />\n    </Stack.Navigator>\n  );\n};\n\nexport default ContactStackNavigator;\n","import React from 'react';\n\nimport { StyleSheet, View, ScrollView, Text } from 'react-native';\n\nimport { RobotoMono_500Medium, RobotoMono_700Bold } from '@expo-google-fonts/roboto-mono';\nimport { Creepster_400Regular } from '@expo-google-fonts/creepster';\n\nimport { globalStyles } from '../styles/styles';\n\nimport * as Font from 'expo-font';\n\nconst myFonts = {\n  RobotoMono_500Medium,\n  RobotoMono_700Bold,\n  Creepster_400Regular\n};\n\nexport default class ProfileScreen extends React.Component {\n  state = {\n    fontsLoaded: false\n  };\n\n  async _loadFontsAsync() {\n    await Font.loadAsync(myFonts);\n    this.setState({ fontsLoaded: true });\n  }\n\n  componentDidMount() {\n    this._loadFontsAsync();\n  }\n\n  render() {\n    if (!this.state.fontsLoaded) {\n      return null;\n    }\n    return (\n      <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n        <Text style={globalStyles.heading1}>Profile</Text>\n        <View style={styles.container}>\n          <Text style={styles.copy}>This is the Profile screen.</Text>\n          <Text style={[styles.copy, { fontSize: 36, fontFamily: 'Creepster_400Regular' }]}>\n            I'm So Sorry\n          </Text>\n          <Text style={styles.copy}>Maybe next time things will go better.</Text>\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: '100%',\n    backgroundColor: '#F2EFC9',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copy: {\n    color: 'black',\n    fontSize: 20,\n    paddingVertical: 10,\n    fontFamily: 'RobotoMono_500Medium'\n  }\n});\n","import React, { useState } from 'react';\nimport { Text, Button, View, ScrollView, Switch, StyleSheet } from 'react-native';\nimport { useFonts, RobotoMono_500Medium, RobotoMono_700Bold } from '@expo-google-fonts/roboto-mono';\nimport { globalStyles } from '../styles/styles';\n\nconst SettingsScreen = () => {\n  const [isEnabled, setIsEnabled] = useState(false);\n  const toggleSwitch = () => setIsEnabled((previousState) => !previousState);\n  const [fontsLoaded] = useFonts({\n    RobotoMono_500Medium,\n    RobotoMono_700Bold\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  } else\n    return (\n      <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n        <View style={styles.page}>\n          <Text style={globalStyles.heading1}>Settings </Text>\n          <Text style={globalStyles.heading2}>General </Text>\n          <View style={styles.fieldset}>\n            <Text style={styles.labels}>You are logged in. </Text>\n            <Button\n              title=\"Sign Out\"\n              style={styles.buttons}\n              accessibilityLabel=\"Sign Out of the application.\"\n            />\n          </View>\n          <Text style={globalStyles.heading2}>Appearance </Text>\n          <View style={styles.fieldset}>\n            <Button\n              style={styles.buttons}\n              title=\"Display Name\"\n              accessibilityLabel=\"SChange the display name that is visible to contacts you authorize.\"\n            />\n\n            <Button\n              style={styles.buttons}\n              title=\"Icon\"\n              accessibilityLabel=\"Change the icon image that is visible to contacts you authorize.\"\n            />\n            <Text style={styles.labels}>Enable Dark Mode: </Text>\n            <Switch\n              trackColor={{ false: '#767577', true: '#81b0ff' }}\n              thumbColor={isEnabled ? '#f5dd4b' : '#f4f3f4'}\n              onValueChange={toggleSwitch}\n              value={isEnabled}\n            />\n          </View>\n\n          <Text style={globalStyles.heading2}>Security</Text>\n          <View style={styles.fieldset}>\n            <Button\n              style={styles.buttons}\n              title=\"Email Address\"\n              accessibilityLabel=\"Change the display name that is visible to contacts you authorize. \"\n            />\n\n            <Button\n              style={styles.buttons}\n              title=\"Secret Key\"\n              accessibilityLabel=\"Change the secret key used to secure your account. \"\n            />\n\n            <Button\n              style={styles.buttons}\n              title=\"Password\"\n              accessibilityLabel=\"Change the password used to secure your account.\"\n            />\n          </View>\n        </View>\n      </ScrollView>\n    );\n};\n\nexport default SettingsScreen;\n\nconst styles = StyleSheet.create({\n  labels: {\n    padding: 4,\n    fontFamily: 'RobotoMono_500Medium'\n  },\n  buttons: {\n    fontSize: 17,\n    fontFamily: 'RobotoMono_500Medium',\n    padding: 4\n  },\n  fieldset: {\n    flex: 1,\n    gap: 10,\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n    marginBottom: 10\n  },\n  page: {\n    flex: 1,\n    gap: 10,\n    backgroundColor: '#D1E6D5'\n  }\n});\n","import React from 'react';\nimport { StyleSheet, View, Text, Button, ScrollView } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';\n\nimport { globalStyles } from '../styles/styles';\n\nimport { RootStackParamList } from '../navigation/types';\nimport { MainTabParamList } from '../navigation/types';\n\ntype HomeScreenProp = CompositeNavigationProp<\n  StackNavigationProp<RootStackParamList, 'Main'>,\n  BottomTabNavigationProp<MainTabParamList, 'Home'>\n>;\n\nimport { useFonts, RobotoMono_500Medium, RobotoMono_700Bold } from '@expo-google-fonts/roboto-mono';\n\nimport { Creepster_400Regular } from '@expo-google-fonts/creepster';\n\nfunction HomeScreen() {\n  const navigation = useNavigation<HomeScreenProp>();\n\n  const [fontsLoaded] = useFonts({\n    RobotoMono_500Medium,\n    RobotoMono_700Bold,\n    Creepster_400Regular\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  } else {\n    return (\n      <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n        <Text style={globalStyles.heading1}>Home</Text>\n        <View style={styles.container}>\n          <Text style={styles.copy}> This is the Home screen.</Text>\n          <Text style={styles.copy}>Whew! So far so good. </Text>\n          <Button title=\"Sign Out\" onPress={() => navigation.navigate('Welcome')} />\n        </View>\n      </ScrollView>\n    );\n  }\n}\n\nexport default HomeScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E0C1D2',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copy: {\n    color: 'black',\n    fontSize: 20,\n    paddingVertical: 10,\n    fontFamily: 'RobotoMono_500Medium'\n  }\n});\n","import React from 'react';\nimport { StyleSheet, View, Text, Button } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport type { StackNavigationProp } from '@react-navigation/stack';\n\nimport * as LocalAuthentication from 'expo-local-authentication';\n\nimport { RootStackParamList } from '../navigation/types';\n\nimport {\n  useFonts,\n  RobotoMono_400Regular,\n  RobotoMono_500Medium,\n  RobotoMono_700Bold\n} from '@expo-google-fonts/roboto-mono';\n\nimport { Creepster_400Regular } from '@expo-google-fonts/creepster';\n\nenum EResult {\n  CANCELLED = 'CANCELLED',\n  DISABLED = 'DISABLED',\n  ERROR = 'ERROR',\n  SUCCESS = 'SUCCESS'\n}\n\ntype welcomeScreenProp = StackNavigationProp<RootStackParamList, 'Welcome'>;\n\nconst WelcomeScreen = () => {\n  const navigation = useNavigation<welcomeScreenProp>();\n  const [fontsLoaded] = useFonts({\n    RobotoMono_400Regular,\n    RobotoMono_500Medium,\n    RobotoMono_700Bold,\n    Creepster_400Regular\n  });\n  const [facialRecognitionAvailable, setFacialRecognitionAvailable] = React.useState(false);\n  const [fingerprintAvailable, setFingerprintAvailable] = React.useState(false);\n  const [irisAvailable, setIrisAvailable] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [result, setResult] = React.useState<EResult>();\n\n  const checkSupportedAuthentication = async () => {\n    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();\n    if (types && types.length) {\n      setFacialRecognitionAvailable(\n        types.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION)\n      );\n      setFingerprintAvailable(types.includes(LocalAuthentication.AuthenticationType.FINGERPRINT));\n      setIrisAvailable(types.includes(LocalAuthentication.AuthenticationType.IRIS));\n    }\n  };\n\n  const authenticate = async () => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const results = await LocalAuthentication.authenticateAsync();\n\n      if (results.success) {\n        setResult(EResult.SUCCESS);\n        navigation.navigate('Main');\n      } else if (results.error === 'unknown') {\n        setResult(EResult.DISABLED);\n      } else if (\n        results.error === 'user_cancel' ||\n        results.error === 'system_cancel' ||\n        results.error === 'app_cancel'\n      ) {\n        setResult(EResult.CANCELLED);\n      }\n    } catch (error) {\n      setResult(EResult.ERROR);\n    }\n\n    setLoading(false);\n  };\n\n  React.useEffect(() => {\n    checkSupportedAuthentication();\n  }, []);\n\n  let resultMessage;\n  switch (result) {\n    case EResult.CANCELLED:\n      resultMessage = 'Authentication process has been cancelled';\n      break;\n    case EResult.DISABLED:\n      resultMessage = 'Biometric authentication has been disabled';\n      break;\n    case EResult.ERROR:\n      resultMessage = 'There was an error in authentication';\n      break;\n    case EResult.SUCCESS:\n      resultMessage = 'Successfully authenticated';\n      break;\n    default:\n      resultMessage = '';\n      break;\n  }\n\n  let description;\n  if (facialRecognitionAvailable && fingerprintAvailable && irisAvailable) {\n    description = 'Authenticate with Face ID, touch ID or iris ID';\n  } else if (facialRecognitionAvailable && fingerprintAvailable) {\n    description = 'Authenticate with Face ID or touch ID';\n  } else if (facialRecognitionAvailable && irisAvailable) {\n    description = 'Authenticate with Face ID or iris ID';\n  } else if (fingerprintAvailable && irisAvailable) {\n    description = 'Authenticate with touch ID or iris ID';\n  } else if (facialRecognitionAvailable) {\n    description = 'Authenticate with Face ID';\n  } else if (fingerprintAvailable) {\n    description = 'Authenticate with Touch ID ';\n  } else if (irisAvailable) {\n    description = 'Authenticate with iris ID';\n  } else {\n    description = 'Biometric authentication is not supported on this device.';\n  }\n\n  if (!fontsLoaded) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        <Text\n          style={[\n            styles.text,\n            { fontSize: 32, paddingBottom: 30, fontFamily: 'RobotoMono_700Bold' }\n          ]}>\n          Welcome to the Demo\n        </Text>\n        <Text\n          style={[\n            styles.text,\n            { fontSize: 42, paddingBottom: 30, fontFamily: 'Creepster_400Regular' }\n          ]}>\n          Congratulations\n        </Text>\n        <Text\n          style={[\n            styles.text,\n            { fontSize: 22, paddingBottom: 30, fontFamily: 'RobotoMono_500Medium' }\n          ]}>\n          What will happen next?\n        </Text>\n        <Text style={[styles.text, { fontSize: 14, fontFamily: 'RobotoMono_500Medium' }]}>\n          {description}.{' '}\n        </Text>\n        <Text style={[styles.text, { fontSize: 14, fontFamily: 'RobotoMono_500Medium' }]}>\n          {facialRecognitionAvailable || fingerprintAvailable || irisAvailable ? (\n            <Button title=\"Authenticate\" onPress={authenticate} />\n          ) : null}\n        </Text>\n        <Text style={[styles.text, { fontSize: 14, fontFamily: 'RobotoMono_500Medium' }]}>\n          {resultMessage ? <Text> Authenticated. </Text> : null}\n        </Text>\n        <Text style={[\n          styles.text,\n          {\n            fontSize: 14, fontFamily: 'RobotoMono_500Medium'\n          }\n        ]}>\n          Similate a login by clicking the button!\n        </Text>\n        <Button\n          title=\"Sign In\"\n          style={[styles.text, { fontSize: 24, fontFamily: 'RobotoMono_500Medium' }]}\n          onPress={() => {\n            navigation.navigate('Main');\n          }}\n        />\n      </View>\n    );\n  }\n};\n\nexport default WelcomeScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#C5D8AB',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text: {\n    color: 'black',\n    paddingVertical: 10\n  }\n});\n","import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport { MainTabParamList } from './types';\n\nimport ContactStack from './ContactStack';\nimport ProfileScreen from '../screens/ProfileScreen';\nimport SettingsScreen from '../screens/SettingsScreen';\nimport HomeScreen from '../screens/HomeScreen';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nconst MainTab = () => {\n  const BottomTab = createBottomTabNavigator<MainTabParamList>();\n\n  return (\n    <BottomTab.Navigator screenOptions={{ headerShown: false, tabBarActiveTintColor: '#e91e63' }}>\n      <BottomTab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"home\" size={size} color={color} />\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Contacts\"\n        component={ContactStack}\n        options={{\n          tabBarLabel: 'Contacts',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"contacts\" size={size} color={color} />\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileScreen}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"user\" size={size} color={color} />\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Settings\"\n        component={SettingsScreen}\n        options={{\n          tabBarLabel: 'Settings',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"setting\" size={size} color={color} />\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n};\n\nexport default MainTab;\n","import React from 'react';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport MainTab from './src/navigation/MainTab';\nimport WelcomeScreen from './src/screens/WelcomeScreen';\n\nimport { RootStackParamList } from './src/navigation/types';\n\n// dependencies\nimport 'react-native-gesture-handler';\nimport 'react-native-reanimated';\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Welcome\" component={WelcomeScreen} />\n        <Stack.Screen name=\"Main\" component={MainTab} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"],"sourceRoot":""}