{"version":3,"sources":["src/styles/styles.js","src/components/Footer.tsx","src/screens/ContactTab.tsx","src/screens/DetailsScreen.tsx","src/navigation/ContactStack.tsx","src/components/Header.tsx","src/screens/ProfileTab.tsx","src/screens/SettingsTab.tsx","src/screens/HomeTab.tsx","src/screens/WelcomeScreen.tsx","src/navigation/MainTab.tsx","App.tsx"],"names":["globalStyles","StyleSheet","create","heading1","fontSize","fontFamily","padding","alignSelf","heading2","droidSafeArea","flex","paddingTop","Platform","OS","backgroundColor","Footer","useState","result","setResult","View","style","height","flexDirection","justifyContent","Pressable","styles","button","onPress","a","async","WebBrowser","Text","text","Linking","alignItems","paddingVertical","paddingHorizontal","borderRadius","elevation","lineHeight","letterSpacing","container","Constants","statusBarHeight","CONTACTS","id","name","birth_year","ContactScreen","navigation","useNavigation","contentContainerStyle","flexGrow","FlatList","data","renderItem","item","navigate","birthYear","borderWidth","hairlineWidth","borderColor","margin","fontWeight","DetailScreen","useRoute","params","ScrollView","paddingBottom","Stack","createStackNavigator","ContactStackNavigator","Navigator","Screen","options","headerShown","component","ContactTab","DetailsScreen","Header","myFonts","RobotoMono_500Medium","RobotoMono_700Bold","Creepster_400Regular","ProfileScreen","state","fontsLoaded","Font","this","setState","_loadFontsAsync","SafeAreaView","copy","React","Component","color","SettingsScreen","isEnabled","setIsEnabled","useFonts","fieldset","Button","buttons","title","accessibilityLabel","labels","Switch","trackColor","false","true","thumbColor","onValueChange","previousState","value","gap","HomeScreen","EResult","MainTab","BottomTab","createBottomTabNavigator","screenOptions","tabBarActiveTintColor","HomeTab","tabBarLabel","tabBarIcon","size","AntDesign","ContactStack","ProfileTab","SettingsTab","WelcomeScreen","resultMessage","description","RobotoMono_400Regular","facialRecognitionAvailable","setFacialRecognitionAvailable","fingerprintAvailable","setFingerprintAvailable","irisAvailable","setIrisAvailable","loading","setLoading","useEffect","LocalAuthentication","types","length","includes","FACIAL_RECOGNITION","FINGERPRINT","IRIS","checkSupportedAuthentication","CANCELLED","DISABLED","ERROR","SUCCESS","results","success","error","App","NavigationContainer"],"mappings":"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","file":"static/js/app.877a811f.chunk.js","sourcesContent":["import { StyleSheet, Platform } from 'react-native';\n\nexport const globalStyles = StyleSheet.create({\n  heading1: {\n    fontSize: 20,\n    fontFamily: 'RobotoMono_500Medium',\n    padding: 4,\n    alignSelf: 'center',\n  },\n  heading2: {\n    fontSize: 20,\n    fontFamily: 'RobotoMono_700Bold',\n    padding: 4\n  },\n  droidSafeArea: {\n    flex: 1,\n    paddingTop: Platform.OS === 'android' ? 50 : 0,\n    backgroundColor: '#F5F8F3',\n  },\n});\n\n\n\n\n\n","import React, { useState } from 'react';\nimport { Pressable, Text, View, StyleSheet } from 'react-native';\n\nimport * as WebBrowser from 'expo-web-browser';\nimport * as Linking from 'expo-linking';\nimport Constants from 'expo-constants';\n\nexport default function Footer() {\n    const [result, setResult] = useState(null);\n\n    const _handlePressButtonAsync = async () => {\n        const result = await WebBrowser.openBrowserAsync('https://example.com');\n        setResult(result);\n    };\n\n    const _handleOpenWithLinking = async () => {\n        const result = await Linking.openURL('https://example.com');\n        setResult(result);\n    };\n\n    return (\n        <View style={{\n            height: 28,\n            backgroundColor: 'thistle',\n            flexDirection: \"row\",\n            justifyContent: \"center\"\n        }}>\n            <Pressable style={styles.button} onPress={_handlePressButtonAsync} >\n                <Text style={styles.text}>Terms of Service </Text>\n            </Pressable>\n            <Pressable style={styles.button} onPress={_handleOpenWithLinking} >\n                <Text style={styles.text}>Privacy Policy</Text>\n            </Pressable>\n            <Text>{result && ' '}</Text>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    button: {\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingVertical: 4,\n        paddingHorizontal: 4,\n        borderRadius: 4,\n        elevation: 3,\n    },\n    text: {\n        fontSize: 14,\n        lineHeight: 14,\n        letterSpacing: 0.25,\n    },\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        paddingTop: Constants.statusBarHeight,\n        backgroundColor: '#ecf0f1',\n    },\n});\n\n\n\n","import { StyleSheet, View, Text, Pressable, FlatList } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport { SafeAreaView } from 'react-native-safe-area-context';\n\nimport { globalStyles } from '../styles/styles';\nimport { ContactScreenNavigationProp } from '../navigation/types';\n\nimport Footer from '../components/Footer';\n\nconst CONTACTS = [\n  {\n    id: 1,\n    name: 'Luke Skywalker',\n    birth_year: '19BBY'\n  },\n  {\n    id: 2,\n    name: 'C-3PO',\n    birth_year: '112BBY'\n  },\n  {\n    id: 3,\n    name: 'R2-D2',\n    birth_year: '33BBY'\n  },\n  {\n    id: 4,\n    name: 'Darth Vader',\n    birth_year: '41.9BBY'\n  },\n  {\n    id: 5,\n    name: 'Leia Organa',\n    birth_year: '19BBY'\n  }\n];\n\nconst ContactScreen = () => {\n  const navigation = useNavigation<ContactScreenNavigationProp>();\n\n  const renderListItems = ({ item }) => {\n    return (\n      <Pressable\n        onPress={() =>\n          navigation.navigate('Details', {\n            name: item.name,\n            birthYear: item.birth_year\n          })\n        }\n      >\n        <Text style={{ fontSize: 18, paddingHorizontal: 12, paddingVertical: 12 }}>\n          {item.name}\n        </Text>\n        <View\n          style={{\n            borderWidth: StyleSheet.hairlineWidth,\n            borderColor: '#ccc'\n          }}\n        />\n      </Pressable>\n    );\n  };\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <View style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n        <Text style={globalStyles.heading1}>Contacts </Text>\n        <FlatList data={CONTACTS} renderItem={renderListItems} />\n        <Pressable\n          onPress={() => navigation.navigate('Settings')} // TODO - broken due to nested navigators.\n          style={{\n            padding: 8,\n            borderWidth: 1,\n            borderRadius: 4,\n            borderColor: 'red',\n            margin: 12,\n            alignItems: 'center'\n          }}\n        >\n          <Text style={{ fontSize: 16, fontWeight: '600' }}>Go to Settings screen</Text>\n        </Pressable>\n      </View>\n      <Footer />\n    </SafeAreaView>\n  );\n};\n\nexport default ContactScreen;\n","import { ScrollView, View, Text } from 'react-native';\n\nimport { useRoute } from '@react-navigation/native';\n\nimport { ContactStackNavigatorParamList } from '../navigation/types';\n\nimport type { RouteProp } from '@react-navigation/native';\n\ntype DetailsScreenRouteProp = RouteProp<ContactStackNavigatorParamList, 'Details'>;\n\nimport { globalStyles } from '../styles/styles';\n\n\nconst DetailScreen = () => {\n  const route = useRoute<DetailsScreenRouteProp>();\n  const { name, birthYear } = route.params;\n\n  return (\n    <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n      <Text style={globalStyles.heading1}>Contact Details</Text>\n      <View style={{ flex: 1, backgroundColor: '#FBEEC6', paddingTop: 12, paddingHorizontal: 10 }}>\n        <Text style={{ fontSize: 18, paddingBottom: 24 }}>This is the Details screen.</Text>\n        <Text style={{ fontSize: 18, paddingBottom: 12 }}>Name: {name}</Text>\n        <Text style={{ fontSize: 18 }}>Birth Year: {birthYear}</Text>\n      </View>\n    </ScrollView>\n  );\n};\n\nexport default DetailScreen;\n","import * as React from 'react';\n\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport ContactTab from '../screens/ContactTab';\nimport DetailsScreen from '../screens/DetailsScreen';\n\nconst Stack = createStackNavigator();\n\nconst ContactStackNavigator = () => {\n  //  'contact screen' subnav will be hidden\n  return (\n    <Stack.Navigator>\n      <Stack.Screen\n        name=\"Contact Screen\"\n        options={{ headerShown: false }}\n        component={ContactTab}\n      />\n      <Stack.Screen\n        name=\"Details\"\n        options={{ headerShown: false }}\n        component={DetailsScreen}\n      />\n    </Stack.Navigator>\n  );\n};\n\nexport default ContactStackNavigator;\n","import { View } from 'react-native';\n\n// to see the header, change the height and add a text component inside the view\nconst Header = () => {\n    return (\n        <View style={{ height: 0 }}>\n        </View>\n    )\n}\n\nexport default Header;\n\n\n","import React from 'react';\n\nimport { StyleSheet, View, ScrollView, Text, SafeAreaView } from 'react-native';\n\nimport { RobotoMono_500Medium, RobotoMono_700Bold } from '@expo-google-fonts/roboto-mono';\nimport { Creepster_400Regular } from '@expo-google-fonts/creepster';\n\nimport { globalStyles } from '../styles/styles';\n\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\n\nimport * as Font from 'expo-font';\n\nconst myFonts = {\n  RobotoMono_500Medium,\n  RobotoMono_700Bold,\n  Creepster_400Regular\n};\n\nexport default class ProfileScreen extends React.Component {\n  state = {\n    fontsLoaded: false\n  };\n\n  async _loadFontsAsync() {\n    await Font.loadAsync(myFonts);\n    this.setState({ fontsLoaded: true });\n  }\n\n  componentDidMount() {\n    this._loadFontsAsync();\n  }\n\n  render() {\n    if (!this.state.fontsLoaded) {\n      return null;\n    }\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <Header />\n        <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flex: 10 }}>\n          <Text style={globalStyles.heading1}>Profile</Text>\n          <View style={styles.container}>\n            <Text style={styles.copy}>This is the Profile screen.</Text>\n            <Text style={[styles.copy, { fontSize: 36, fontFamily: 'Creepster_400Regular' }]}>\n              I'm So Sorry\n            </Text>\n            <Text style={styles.copy}>Maybe next time things will go better.</Text>\n          </View>\n        </ScrollView>\n        <Footer />\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height: '100%',\n    backgroundColor: '#F2EFC9',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copy: {\n    color: 'black',\n    fontSize: 18,\n    paddingVertical: 10,\n    fontFamily: 'RobotoMono_500Medium'\n  }\n});\n","import React, { useState } from 'react';\nimport { Text, Button, View, ScrollView, Switch, StyleSheet, SafeAreaView } from 'react-native';\nimport { useFonts, RobotoMono_500Medium, RobotoMono_700Bold } from '@expo-google-fonts/roboto-mono';\n\nimport Footer from '../components/Footer';\n\nimport { globalStyles } from '../styles/styles';\n\n\nconst SettingsScreen = () => {\n  const [isEnabled, setIsEnabled] = useState(false);\n  const toggleSwitch = () => setIsEnabled((previousState) => !previousState);\n  const [fontsLoaded] = useFonts({\n    RobotoMono_500Medium,\n    RobotoMono_700Bold\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  } else\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n          <View style={styles.container}>\n            <Text style={globalStyles.heading1}>Settings </Text>\n            <View style={styles.fieldset}>\n              <Text style={globalStyles.heading2}>Appearance </Text>\n              <Button\n                style={styles.buttons}\n                title=\"Display Name\"\n                accessibilityLabel=\"SChange the display name that is visible to contacts you authorize.\"\n              />\n              <Button\n                style={styles.buttons}\n                title=\"Icon\"\n                accessibilityLabel=\"Change the icon image that is visible to contacts you authorize.\"\n              />\n              <Text style={styles.labels}>Enable Dark Mode: </Text>\n              <Switch\n                trackColor={{ false: '#767577', true: '#81b0ff' }}\n                thumbColor={isEnabled ? '#f5dd4b' : '#f4f3f4'}\n                onValueChange={toggleSwitch}\n                value={isEnabled}\n              />\n            </View>\n\n            <View style={styles.fieldset}>\n              <Text style={globalStyles.heading2}>Security</Text>\n              <Button\n                style={styles.buttons}\n                title=\"Email Address\"\n                accessibilityLabel=\"Change the display name that is visible to contacts you authorize. \"\n              />\n\n              <Button\n                style={styles.buttons}\n                title=\"Secret Key\"\n                accessibilityLabel=\"Change the secret key used to secure your account. \"\n              />\n\n              <Button\n                style={styles.buttons}\n                title=\"Password\"\n                accessibilityLabel=\"Change the password used to secure your account.\"\n              />\n            </View>\n            <View style={styles.fieldset}>\n              <Text style={globalStyles.heading2}>General </Text>\n              <Text style={styles.labels}>You are logged in. </Text>\n              <Button\n                title=\"Sign Out\"\n                style={styles.buttons}\n                accessibilityLabel=\"Sign Out of the application.\"\n              />\n            </View>\n\n\n          </View>\n        </ScrollView>\n        <Footer />\n      </SafeAreaView>\n    );\n};\n\nexport default SettingsScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    gap: 10,\n    backgroundColor: '#D1E6D5'\n  },\n  fieldset: {\n    flex: 1,\n    padding: 2,\n    gap: 10,\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start'\n  },\n  labels: {\n    padding: 2,\n    fontFamily: 'RobotoMono_500Medium'\n  },\n  buttons: {\n    fontFamily: 'RobotoMono_500Medium',\n    paddingBottom: 10\n  }\n});\n","import React from 'react';\nimport { StyleSheet, View, Text, Button, ScrollView, SafeAreaView } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { CompositeNavigationProp } from '@react-navigation/native';\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { BottomTabNavigationProp } from '@react-navigation/bottom-tabs';\n\nimport { globalStyles } from '../styles/styles';\n\nimport { RootStackParamList } from '../navigation/types';\nimport { MainTabParamList } from '../navigation/types';\n\n\nimport Footer from '../components/Footer';\n\n\ntype HomeScreenProp = CompositeNavigationProp<\n  StackNavigationProp<RootStackParamList, 'Main'>,\n  BottomTabNavigationProp<MainTabParamList, 'Home'>\n>;\n\nimport { useFonts, RobotoMono_500Medium, RobotoMono_700Bold } from '@expo-google-fonts/roboto-mono';\n\nimport { Creepster_400Regular } from '@expo-google-fonts/creepster';\n\nfunction HomeScreen() {\n  const navigation = useNavigation<HomeScreenProp>();\n\n  const [fontsLoaded] = useFonts({\n    RobotoMono_500Medium,\n    RobotoMono_700Bold,\n    Creepster_400Regular\n  });\n\n  if (!fontsLoaded) {\n    return null;\n  } else {\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n          <Text style={globalStyles.heading1}>Home</Text>\n          <View style={styles.container}>\n            <Text style={styles.copy}> This is the Home screen.</Text>\n            <Text style={styles.copy}>Whew! So far so good. </Text>\n            <Button title=\"Sign Out\" onPress={() => navigation.navigate('Welcome')} />\n          </View>\n        </ScrollView>\n        <Footer />\n      </SafeAreaView>\n    );\n  }\n}\n\nexport default HomeScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#E0C1D2',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  copy: {\n    color: 'black',\n    fontSize: 20,\n    paddingVertical: 10,\n    fontFamily: 'RobotoMono_500Medium'\n  }\n});\n","import React from 'react';\nimport { StyleSheet, View, Text, Button, ScrollView, SafeAreaView } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport type { StackNavigationProp } from '@react-navigation/stack';\n\n\nimport * as LocalAuthentication from 'expo-local-authentication';\n\nimport { RootStackParamList } from '../navigation/types';\nimport { globalStyles } from '../styles/styles';\n\nimport Footer from '../components/Footer';\n\n\nimport {\n  useFonts,\n  RobotoMono_400Regular,\n  RobotoMono_500Medium,\n  RobotoMono_700Bold\n} from '@expo-google-fonts/roboto-mono';\n\nimport { Creepster_400Regular } from '@expo-google-fonts/creepster';\n\nenum EResult {\n  CANCELLED = 'CANCELLED',\n  DISABLED = 'DISABLED',\n  ERROR = 'ERROR',\n  SUCCESS = 'SUCCESS'\n}\n\ntype welcomeScreenProp = StackNavigationProp<RootStackParamList, 'Welcome'>;\n\nconst WelcomeScreen = () => {\n  const navigation = useNavigation<welcomeScreenProp>();\n  const [fontsLoaded] = useFonts({\n    RobotoMono_400Regular,\n    RobotoMono_500Medium,\n    RobotoMono_700Bold,\n    Creepster_400Regular\n  });\n  const [facialRecognitionAvailable, setFacialRecognitionAvailable] = React.useState(false);\n  const [fingerprintAvailable, setFingerprintAvailable] = React.useState(false);\n  const [irisAvailable, setIrisAvailable] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n  const [result, setResult] = React.useState<EResult>();\n\n  const checkSupportedAuthentication = async () => {\n    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();\n    if (types && types.length) {\n      setFacialRecognitionAvailable(\n        types.includes(LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION)\n      );\n      setFingerprintAvailable(types.includes(LocalAuthentication.AuthenticationType.FINGERPRINT));\n      setIrisAvailable(types.includes(LocalAuthentication.AuthenticationType.IRIS));\n    }\n  };\n\n  const authenticate = async () => {\n    if (loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const results = await LocalAuthentication.authenticateAsync();\n\n      if (results.success) {\n        setResult(EResult.SUCCESS);\n        navigation.navigate('Main');\n      } else if (results.error === 'unknown') {\n        setResult(EResult.DISABLED);\n      } else if (\n        results.error === 'user_cancel' ||\n        results.error === 'system_cancel' ||\n        results.error === 'app_cancel'\n      ) {\n        setResult(EResult.CANCELLED);\n      }\n    } catch (error) {\n      setResult(EResult.ERROR);\n    }\n\n    setLoading(false);\n  };\n\n  React.useEffect(() => {\n    checkSupportedAuthentication();\n  }, []);\n\n  let resultMessage;\n  switch (result) {\n    case EResult.CANCELLED:\n      resultMessage = 'Authentication process has been cancelled';\n      break;\n    case EResult.DISABLED:\n      resultMessage = 'Biometric authentication has been disabled';\n      break;\n    case EResult.ERROR:\n      resultMessage = 'There was an error in authentication';\n      break;\n    case EResult.SUCCESS:\n      resultMessage = 'Successfully authenticated';\n      break;\n    default:\n      resultMessage = '';\n      break;\n  }\n\n  let description;\n  if (facialRecognitionAvailable && fingerprintAvailable && irisAvailable) {\n    description = 'Authenticate with Face ID, touch ID or iris ID';\n  } else if (facialRecognitionAvailable && fingerprintAvailable) {\n    description = 'Authenticate with Face ID or touch ID';\n  } else if (facialRecognitionAvailable && irisAvailable) {\n    description = 'Authenticate with Face ID or iris ID';\n  } else if (fingerprintAvailable && irisAvailable) {\n    description = 'Authenticate with touch ID or iris ID';\n  } else if (facialRecognitionAvailable) {\n    description = 'Authenticate with Face ID';\n  } else if (fingerprintAvailable) {\n    description = 'Authenticate with Touch ID ';\n  } else if (irisAvailable) {\n    description = 'Authenticate with iris ID';\n  } else {\n    description = 'Biometric authentication is not supported on this device.';\n  }\n\n  if (!fontsLoaded) {\n    return null;\n  } else {\n    return (\n      <SafeAreaView style={{ flex: 1 }}>\n        <ScrollView style={globalStyles.droidSafeArea} contentContainerStyle={{ flexGrow: 1 }}>\n\n          <View style={styles.container}>\n            <Text\n              style={[\n                styles.text,\n                { fontSize: 32, paddingBottom: 30, fontFamily: 'RobotoMono_700Bold' }\n              ]}>\n              Welcome to the Demo\n            </Text>\n            <Text\n              style={[\n                styles.text,\n                { fontSize: 42, paddingBottom: 30, fontFamily: 'Creepster_400Regular' }\n              ]}>\n              Congratulations\n            </Text>\n            <Text\n              style={[\n                styles.text,\n                { fontSize: 22, paddingBottom: 30, fontFamily: 'RobotoMono_500Medium' }\n              ]}>\n              What will happen next?\n            </Text>\n            <Text style={[styles.text, { fontSize: 14, fontFamily: 'RobotoMono_500Medium' }]}>\n              {description}.{' '}\n            </Text>\n            <Text style={[styles.text, { fontSize: 14, fontFamily: 'RobotoMono_500Medium' }]}>\n              {facialRecognitionAvailable || fingerprintAvailable || irisAvailable ? (\n                <Button title=\"Authenticate\" onPress={authenticate} />\n              ) : null}\n            </Text>\n            <Text style={[styles.text, { fontSize: 14, fontFamily: 'RobotoMono_500Medium' }]}>\n              {resultMessage ? <Text> Authenticated. </Text> : null}\n            </Text>\n            <Text style={[\n              styles.text,\n              {\n                fontSize: 14, fontFamily: 'RobotoMono_500Medium'\n              }\n            ]}>\n              Similate a login by clicking the button!\n            </Text>\n            <Button\n              title=\"Sign In\"\n              style={[styles.text, { fontSize: 24, fontFamily: 'RobotoMono_500Medium' }]}\n              onPress={() => {\n                navigation.navigate('Main');\n              }}\n            />\n          </View>\n        </ScrollView>\n        <Footer />\n      </SafeAreaView>\n    );\n  }\n};\n\nexport default WelcomeScreen;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#C5D8AB',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text: {\n    color: 'black',\n    paddingVertical: 10\n  }\n});\n","import React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\n\nimport { MainTabParamList } from './types';\n\nimport ContactStack from './ContactStack';\nimport ProfileTab from '../screens/ProfileTab';\nimport SettingsTab from '../screens/SettingsTab';\nimport HomeTab from '../screens/HomeTab';\n\nimport { AntDesign } from '@expo/vector-icons';\n\nconst MainTab = () => {\n  const BottomTab = createBottomTabNavigator<MainTabParamList>();\n\n  return (\n    <BottomTab.Navigator screenOptions={{ headerShown: false, tabBarActiveTintColor: '#e91e63' }}>\n      <BottomTab.Screen\n        name=\"Home\"\n        component={HomeTab}\n        options={{\n          tabBarLabel: 'Home',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"home\" size={size} color={color} />\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Contacts\"\n        component={ContactStack}\n        options={{\n          tabBarLabel: 'Contacts',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"contacts\" size={size} color={color} />\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Profile\"\n        component={ProfileTab}\n        options={{\n          tabBarLabel: 'Profile',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"user\" size={size} color={color} />\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Settings\"\n        component={SettingsTab}\n        options={{\n          tabBarLabel: 'Settings',\n          tabBarIcon: ({ color, size }) => <AntDesign name=\"setting\" size={size} color={color} />\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n};\n\nexport default MainTab;\n","import React from 'react';\n\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport MainTab from './src/navigation/MainTab';\nimport WelcomeScreen from './src/screens/WelcomeScreen';\n\nimport { RootStackParamList } from './src/navigation/types';\n\n// dependencies\nimport 'react-native-gesture-handler';\nimport 'react-native-reanimated';\n\nconst Stack = createStackNavigator<RootStackParamList>();\n\nexport default function App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\n        <Stack.Screen name=\"Welcome\" component={WelcomeScreen} />\n        <Stack.Screen name=\"Main\" component={MainTab} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"],"sourceRoot":""}